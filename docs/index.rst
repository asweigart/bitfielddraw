.. BitFieldDraw documentation master file, created by
   sphinx-quickstart on Mon Nov 12 14:17:27 2018.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to BitFieldDraw's documentation!
=======================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:














<p>A bit field is a 2D image of black and white pixels. It's the simplest possible image. The pixels don't necessarily have to be black and white, but a bit field is limited to two colors because each pixel is represented by a bit: a 0 or 1 number.</p>

<p>Despite this limitation, bit fields can be beautiful. I found this twitter thread that had several bit fields generated by simple mathematical functions. The functions are fed the X and Y coordinate of a pixel, and if the function returns a zero the pixel is black and if the function returns a nonzero the pixel is white. There are several interesting patterns that can be generated from simple functions:</p>

<p><img src="/blogstatic/bitfielddraw/terminalbitfield1.png" /></p>

<p>Inspired by this, I've created a Python module called BitFieldDraw, which makes it easy to see the bit fields generated from a given function. You can <code>import bitfielddraw</code> and then call the <code>saveBitFieldImg()</code> or <code>printBitFieldStr()</code> functions to view a bit field. Some examples:</p>

<p><code>&gt;&gt;&gt; saveBitFieldImg('bitfield1.png', lambda x, y: (x ^ y) % 5, width=400, height=400)</code><br /><img src="/blogstatic/bitfielddraw/bitfield1.png" /></p>
<p><code>&gt;&gt;&gt; saveBitFieldImg('bitfield2.png', lambda x, y: (x * 64) % y, width=400, height=400)</code><br /><img src="/blogstatic/bitfielddraw/bitfield2.png" /></p>
<p><code>&gt;&gt;&gt; saveBitFieldImg('bitfield3.png', lambda x, y: (x % y) % 4, width=400, height=400)</code><br /><img src="/blogstatic/bitfielddraw/bitfield3.png" /></p>
<p><code>&gt;&gt;&gt; saveBitFieldImg('bitfield4.png', lambda x, y: (x & y) & (x ^ y) % 19, width=400, height=400)</code><br /><img src="/blogstatic/bitfielddraw/bitfield4.png" /></p>

<p>When you save bit fields as image files, you can give them any two colors:</p>

<p><code>&gt;&gt;&gt; saveBitFieldImg('bitfield-color1.png', '(x & y) & (x ^ y) % 19', width=400, height=400, trueColor='red', falseColor='black')</code><br /><img src="/blogstatic/bitfielddraw/bitfield-color1.png" /></p>
<p><code>&gt;&gt;&gt; saveBitFieldImg('bitfield-color2.png', '(x & y) & (x ^ y) % 19', width=400, height=400, trueColor='yellow', falseColor='blue')</code><br /><img src="/blogstatic/bitfielddraw/bitfield-color2.png" /></p>
<p><code>&gt;&gt;&gt; saveBitFieldImg('bitfield-color3.png', '(x & y) & (x ^ y) % 19', width=400, height=400, trueColor='#004400', falseColor='green')</code><br /><img src="/blogstatic/bitfielddraw/bitfield-color3.png" /></p>

<p>There are several basic functions in this module. Each of these functions takes a <code>func</code> parameter of the function that accepts two arguments (the integer X and Y coordinates of a pixel) and returns an <code>int</code> or <code>bool</code> value. The width and height of the bit field are automatically set to the size of the terminal window, in text cells. Since text cells in terminal windows are twice as tall as they are wide, the height is doubled. However, other integers values can be passed for the <code>width</code> and <code>height</code> parameters to the functions.</p>

<p>The 0, 0 origin of the bit field is set to the bottom left corner. The origin can be changed by passing integers to the <code>left</code> and <code>bottom</code> parameters. Unlike computer screen coordinates, the <code>bitfielddraw</code> module uses mathematics coordinates so that the Y coordinates increase going up, not down.</p>

<p>You can change this by passing <code>inverty=True</code> to any of the BitFieldDraw functions, in which case the y coordinates will increase going down. You can also pass <code>invertx=True</code> to flip the x coordinates. (Currently there's no way to rotate the bit fields.)</p>

<p>If you'd like to swap the colors used, you can pass <code>True</code> for the <code>invert</code> parameter. The <code>saveBitFieldImg()</code> and <code>saveBitFieldStr()</code> functions have a <code>filename</code> parameter as their first parameter, to specify where the bit field should be saved. The module uses Pillow to generate and save images in the .png, .jpg, .gif, .bmp, or any other format that Pillow supports. The format is selected based on the file extension passed to the <code>filename</code> parameter.</p>

<h2>printBitFieldStr()</h3>

<p>Let's look at the first function, which prints bit fields directly into the terminal window as text characters. Since text cells in terminal windows are twice as tall as they are wide, each text cell actually represents two pixels in one column and two rows. The text characters used are code points 9600 (just the top pixel set <code>'▀'</code>), 9604 (just the bottom pixel set <code>'▄'</code>), and 9608 (both pixels set <code>'█'</code>). For both pixels being clear, we use a space character <code>' '</code>.</p>

<pre>
&gt;&gt;&gt; import bitfielddraw
&gt;&gt;&gt; def bitFieldFunc(x, y):
...     return (x ^ y) % 5
...
&gt;&gt;&gt; bitfielddraw.printBitFieldStr(bitFieldFunc)
██▀▄██▄▀████▀▄████▄▀████▀▄██▄▀██████▀▄██▄▀████▀▄▀▄██▄▀████▀▄██▄▀██▄▀████▀▄██▄▀█
██▄▀██▀▄████▄▀████▀▄████▄▀██▀▄██▄▀██▀▄████▄▀██▀▄▀▄████▄▀██▀▄████▀▄████▄▀██▀▄███
▄▀██▀▄████████▄▀▀▄████████▄▀██▀▄██▄▀██▀▄▄▀██▀▄████▀▄▄▀██▀▄████████▀▄▄▀██▀▄█████
██▀▄██▄▀▄▀████████████▀▄▀▄██▄▀██▀▄██▄▀████▀▄██▄▀██▄▀▀▄████████▀▄██▄▀▀▄████████▀
▀▄██▄▀████▄▀████████▀▄████▀▄██▄▀██▀▄██▄▀▀▄██▄▀██▄▀████▀▄████▀▄██▄▀████▀▄████▀▄█
████▄▀████▄▀██▀▄▄▀██▀▄████▀▄██████▄▀██▀▄▄▀██▀▄████▀▄████▀▄████▄▀██▀▄████▀▄████▄
██████▄▀▄▀██▀▄████▄▀██▀▄▀▄██████▄▀██▀▄████▄▀██▀▄▀▄████████▀▄▄▀██▀▄████████▀▄▄▀█
▄▀████████▀▄██▄▀▀▄██▄▀████████▀▄██▀▄██▄▀▀▄██▄▀████████▀▄██▄▀▀▄████████▀▄██▄▀▀▄█
██▄▀████▀▄██▄▀████▀▄██▄▀████▀▄██▀▄██▄▀████▀▄██▄▀████▀▄██▄▀████▀▄████▀▄██▄▀████▀
▀▄████▄▀██▀▄████▄▀██▀▄████▄▀██▀▄██▀▄████▄▀██▀▄████▄▀██▀▄████▄▀██▄▀██▀▄████▄▀██▀
██▀▄▄▀██▀▄████████▄▀██▀▄▄▀██▀▄██▀▄████████▄▀██▀▄▄▀██▀▄████████▄▀██▄▀██▀▄▄▀██▀▄█
██▄▀▀▄████████▀▄▀▄██▄▀████▀▄██▄▀██████▀▄▀▄██▄▀████▀▄██▄▀▄▀██████▀▄██▄▀████▀▄██▄
▄▀████▀▄████▀▄████▀▄██▄▀▀▄██▄▀██████▀▄████▀▄██▄▀▀▄██▄▀████▄▀██████▀▄██▄▀▀▄██▄▀█
██▀▄████▀▄████▄▀██▄▀██▀▄▄▀██▀▄██▄▀██▀▄████▀▄████████▄▀████▄▀██▀▄██▄▀██▀▄▄▀██▀▄█
▀▄████████▀▄▄▀██▄▀██▀▄████▄▀██▀▄██▄▀██▀▄▀▄████████████▄▀▄▀██▀▄██▄▀██▀▄████▄▀██▀
██████▀▄██▄▀▀▄████▀▄██▄▀▀▄██▄▀██▀▄██▄▀████████▀▄▄▀████████▀▄██▄▀██▀▄██▄▀▀▄██▄▀█
████▀▄██▄▀████▀▄▀▄██▄▀████▀▄██▄▀██▀▄██▄▀████▀▄████▄▀████▀▄██▄▀██▀▄██▄▀████▀▄██▄
▄▀██▀▄████▄▀██▀▄▀▄████▄▀██▀▄██████▄▀██▀▄████▄▀████▀▄████▄▀██▀▄██████▄▀██▀▄████▄
██▄▀██▀▄▄▀██▀▄████▀▄▄▀██▀▄██████▄▀██▀▄████████▄▀▀▄████████▄▀██▀▄██████▄▀██▀▄▄▀█
▀▄██▄▀████▀▄██▄▀██▄▀▀▄████████▀▄██▀▄██▄▀▄▀████████████▀▄▀▄██▄▀██▄▀████████▄▀▀▄█
██▀▄██▄▀▀▄██▄▀██▄▀████▀▄████▀▄██▀▄██▄▀████▄▀████████▀▄████▀▄██▄▀██▄▀████▄▀████▀
██▄▀██▀▄▄▀██▀▄████▀▄████▀▄████▄▀████▄▀████▄▀██▀▄▄▀██▀▄████▀▄████▀▄████▄▀████▄▀█
▄▀██▀▄████▄▀██▀▄▀▄████████▀▄▄▀████████▄▀▄▀██▀▄████▄▀██▀▄▀▄████████▀▄▄▀████████▄
██▀▄██▄▀▀▄██▄▀████████▀▄██▄▀▀▄██▄▀████████▀▄██▄▀▀▄██▄▀████████▀▄██▄▀▀▄██▄▀█████
▀▄██▄▀████▀▄██▄▀████▀▄██▄▀████▀▄██▄▀████▀▄██▄▀████▀▄██▄▀████▀▄██▄▀████▀▄██▄▀███
</pre>

<p>Since these functions are often simple, you could also use a lambda function to produce equivalent results: <code>bitfielddraw.printBitFieldStr(lambda x, y: (x ^ y) % 5)</code></p>

<p>The size of the bit field matches the size of the terminal window, but we can pass different values for the <code>width</code> and <code>height</code> parameters. We can also flip the colors by passing <code>True</code> for the <code>invert</code> parameter:</p>

<pre>
&gt;&gt;&gt; import bitfielddraw
&gt;&gt;&gt; bitfielddraw.printBitFieldStr(lambda x, y: (x ^ y) % 5, invert=True, width=20, height=20)
      ▄▀  ▀▄▄▀    ▄▀
    ▄▀  ▀▄    ▄▀▄▀
▀▄  ▄▀    ▀▄  ▄▀▄▀
  ▀▄  ▄▀▀▄  ▄▀    ▄▀
▄▀  ▀▄    ▄▀  ▀▄  ▀▄
  ▄▀  ▀▄▄▀  ▀▄  ▀▄
  ▀▄  ▄▀▀▄  ▄▀    ▄▀
▀▄  ▄▀    ▀▄  ▄▀▄▀
  ▄▀  ▀▄▄▀  ▀▄
▄▀  ▀▄    ▄▀  ▀▄
</pre>

<p>You can also move the origin coordinate for the bottom-left corner by passing different values for the <code>left</code> and <code>bottom</code> parameters:</p>

<pre>
&gt;&gt;&gt; import bitfielddraw
&gt;&gt;&gt; bitfielddraw.printBitFieldStr(lambda x, y: (x ^ y) % 5, invert=True, width=20, height=20, left=2, bottom=2)
        ▄▀▀▄  ▀▄  ▄▀
    ▄▀  ▀▄▄▀    ▄▀
  ▄▀  ▀▄    ▄▀▄▀  ▀▄
  ▄▀    ▀▄  ▄▀▄▀
▀▄  ▄▀▀▄  ▄▀    ▄▀▀▄
  ▀▄    ▄▀  ▀▄  ▀▄▄▀
▄▀  ▀▄▄▀  ▀▄  ▀▄
▀▄  ▄▀▀▄  ▄▀    ▄▀
  ▄▀    ▀▄  ▄▀▄▀
▄▀  ▀▄▄▀  ▀▄
</pre>

<h2>getBitFieldStr() and saveBitFieldStr()</h3>

<p>The <code>saveBitFieldStr()</code> function will save the bit field text characters to a file instead of display them on the screen. The first parameter is the filename of the save file and the second parameter is the function:</p>

<pre>
&gt;&gt;&gt; import bitfielddraw
&gt;&gt;&gt; bitfielddraw.saveBitFieldStr('bitfield.txt', lambda x, y: (x ^ y) % 5)
&gt;&gt;&gt;
</pre>

<p>The above code saves the bit field (with the terminal window's width and height) to a text file named <i>bitfield.txt</i>. Text editors make it easy to view large text fields (be sure to turn off word wrap), so we could make much larger bit fields:</p>

<pre>
&gt;&gt;&gt; import bitfielddraw
&gt;&gt;&gt; bitfielddraw.saveBitFieldStr('largebitfield.txt', lambda x, y: (x ^ y) % 5, width=1000, height=1000)
&gt;&gt;&gt;
</pre>

<p>You can also get the string of the bit field directly with <code>getBitFieldStr()</code>:</p>

<pre>
&gt;&gt;&gt; import bitfielddraw
&gt;&gt;&gt; bitfielddraw.printBitFieldStr(lambda x, y: (x ^ y) % 5, width=10, height=10)
██▀▄██▄▀▀▄
██▄▀██▀▄▄▀
▄▀██▀▄████
██▀▄██▄▀▀▄
▀▄██▄▀████
&gt;&gt;&gt; bitfielddraw.getBitFieldStr(lambda x, y: (x ^ y) % 5, width=10, height=10)
'██▀▄██▄▀▀▄\n██▄▀██▀▄▄▀\n▄▀██▀▄████\n██▀▄██▄▀▀▄\n▀▄██▄▀████'
</pre>


<h2>getBitFieldImg(), saveBitFieldImg(), and showBitFieldImg()</h3>

<p>Instead of a string of text characters, you can also get a Pillow image object generated from the function. The <code>getBitFieldImg()</code> function has the same parameters as <code>getBitFieldStr()</code>, except it also has a <code>trueColor</code> and <code>falseColor</code> parameters to set the colors used when the function returns a <code>True</code> or <code>False</code> value, respectively. These colors can be anything that the Pillow library accepts, such as simple strings like <code>'red'</code> or <code>'white'</code> or RGB hex values like <code>'#ff0000'</code>.</p>

<p>These functions require that Pillow is installed. You can install it by running <code>pip install --user pillow</code> (on Windows) or <code>pip3 install --user pillow</code> (on macOS and Linux) from a terminal window. Currently BitFieldDraw does not support transparency.</p>

<pre>
&gt;&gt;&gt; import bitfielddraw
&gt;&gt;&gt; im = bitfielddraw.getBitFieldImg(lambda x, y: (x ^ y) % 5, width=200, height=200)
&gt;&gt;&gt; type(im)
&lt;class 'PIL.Image.Image'&gt;
&gt;&gt;&gt; im.show()  # Have Pillow display the image.
&gt;&gt;&gt; im.save('bitfield.png')  # Save the image to bitfield.png.
&gt;&gt;&gt; # Or call the following shortcut functions:
&gt;&gt;&gt; bitfielddraw.showBitFieldImg(lambda x, y: (x ^ y) % 5, width=200, height=200)
&gt;&gt;&gt; bitfielddraw.saveBitFieldImg('bitfield.png', lambda x, y: (x ^ y) % 5, width=200, height=200)
</pre>

<h2>getBitField(), getBitFieldStrFromSet(), and getBitFieldImgFromSet</h3>

<p>If you'd like to get the raw data of the bit field, you can call <code>getBitField()</code> which will return a frozen set of (x, y) tuples. From this, you can make changes to the data and then pass it to <code>getBitFieldStrFromSet()</code> or <code>getBitFieldImgFromSet()</code> to get a string or Pillow image object of the modified bit field.</p>

<pre>
&gt;&gt;&gt; import bitfielddraw
&gt;&gt;&gt; bitFieldData = bitfielddraw.getBitField(lambda x, y: (x^y)%5, width=20, height=20)
&gt;&gt;&gt; bitFieldData
frozenset({(7, 17), (18, 17), (8, 0), (19, 0), (8, 9), (19, 9), (11, 5), (8, 18), (19, 18), (0, 14), (4, 2), (3, 15), (14, 15), (15, 7), (7, 3), (18, 3), (15, 16), (7, 12), (8, 4), (19, 4), (11, 0), (0, 9), (11, 9), (3, 1), (3, 10), (14, 10), (3, 19), (14, 19), (15, 2), (15, 11), (18, 7), (7, 16), (18, 16), (10, 8), (10, 17), (3, 5), (14, 5), (3, 14), (15, 6), (18, 2), (7, 11), (6, 15), (10, 3), (10, 12), (2, 17), (3, 0), (14, 0), (14, 9), (3, 18), (14, 18), (6, 10), (6, 19), (10, 7), (2, 3), (10, 16), (2, 12), (3, 4), (17, 6), (9, 11), (6, 5), (6, 14), (10, 2), (10, 11), (2, 16), (16, 18), (17, 1), (5, 8), (17, 10), (17, 19), (9, 15), (6, 0), (10, 6), (2, 11), (1, 15), (13, 17), (16, 13), (5, 3), (9, 1), (5, 12), (17, 14), (9, 10), (9, 19), (6, 4), (6, 13), (13, 3), (1, 10), (13, 12), (16, 8), (1, 19), (16, 17), (17, 0), (5, 7), (17, 9), (9, 5), (5, 16), (9, 14), (12, 15), (1, 5), (16, 3), (13, 16), (16, 12), (5, 2), (17, 4), (9, 0), (5, 11), (0, 18), (12, 1), (12, 10), (4, 6), (12, 19), (4, 15), (1, 0), (1, 9), (13, 11), (16, 7), (1, 18), (5, 6), (19, 8), (0, 4), (19, 17), (0, 13), (11, 13), (12, 5), (12, 14), (4, 10), (4, 19), (16, 2), (1, 13), (8, 3), (19, 3), (19, 12), (8, 12), (0, 8), (11, 8), (0, 17), (11, 17), (12, 0), (4, 5), (15, 1), (7, 6), (15, 19), (7, 15), (18, 15), (0, 3), (11, 3), (19, 16), (8, 16), (0, 12), (11, 12), (12, 4), (4, 0), (4, 9), (3, 13), (14, 13), (7, 1), (18, 1), (15, 14), (7, 10), (18, 10), (18, 19), (19, 2), (8, 11), (19, 11), (0, 7), (11, 7), (0, 16), (11, 16), (3, 8), (14, 8), (3, 17), (14, 17), (15, 9), (7, 5), (18, 5), (15, 18), (7, 14), (18, 14), (19, 6), (0, 2), (11, 2), (14, 3), (14, 12), (15, 4), (7, 0), (18, 0), (15, 13), (7, 9), (18, 9), (10, 1), (2, 6), (2, 15), (3, 7), (14, 7), (3, 16), (17, 18), (7, 4), (18, 4), (6, 8), (6, 17), (2, 1), (10, 14), (2, 10), (2, 19), (3, 2), (14, 2), (3, 11), (17, 13), (9, 18), (10, 9), (2, 5), (10, 18), (2, 14), (14, 6), (9, 4), (9, 13), (6, 7), (6, 16), (10, 4), (2, 0), (10, 13), (2, 9), (13, 6), (2, 18), (13, 15), (16, 11), (5, 1), (17, 3), (17, 12), (9, 8), (5, 19), (9, 17), (6, 2), (6, 11), (2, 4), (13, 1), (1, 8), (13, 10), (16, 6), (1, 17), (16, 15), (17, 7), (5, 14), (17, 16), (12, 13), (4, 18), (1, 3), (13, 5), (16, 1), (1, 12), (13, 14), (16, 10), (16, 19), (17, 2), (5, 9), (17, 11), (9, 7), (5, 18), (6, 1), (12, 8), (12, 17), (4, 13), (13, 0), (1, 7), (13, 9), (16, 5), (1, 16), (13, 18), (5, 4), (9, 2), (5, 13), (8, 6), (8, 15), (19, 15), (0, 11), (4, 8), (4, 17), (1, 2), (13, 4), (16, 0), (7, 18), (8, 1), (19, 1), (8, 10), (0, 6), (11, 6), (8, 19), (11, 15), (12, 7), (4, 3), (12, 16), (4, 12), (1, 6), (15, 8), (18, 13), (8, 5), (19, 5), (0, 1), (8, 14), (19, 14), (11, 10), (0, 19), (11, 19), (12, 2), (12, 11), (4, 7), (15, 3), (15, 12), (18, 8)})
</pre>

<p>(Currently, getBitFieldStrFromSet() and getBitFieldImgFromSet() aren't implemented.)</p>


<h2>Examples</h3>

<p>BitFieldDraw comes with several examples in its <code>EXAMPLES</code> member. Note that these are strings of Python code. <code>EXAMPLES</code> was designed this was to make it easier to see. To get the actual lambda function value, pass the string value to Python's built-in <code>eval()</code> function.</p>

<pre>
&gt;&gt;&gt; import bitfielddraw
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(bitfielddraw.EXAMPLES)
('lambda x, y: (x ^ y) % 5',
 'lambda x, y: (x ^ y) % 9',
 'lambda x, y: (x ^ y) % 17',
 'lambda x, y: (x ^ y) % 33',
 'lambda x, y: (x ^ y) % 2',
 'lambda x, y: (x ^ y) % 4',
 'lambda x, y: (x ^ y) % 8',
 'lambda x, y: (x | y) % 7',
 'lambda x, y: (x | y) % 17',
 'lambda x, y: (x | y) % 29',
 'lambda x, y: (x * y) & 64',
 'lambda x, y: (x * y) & 24',
 'lambda x, y: (x * y) & 47',
 'lambda x, y: (x ^ y) < 77',
...
</pre>

<p>You can view a slideshow of these examples by running <code>bitfielddraw.main()</code>. I recommend maximizing your terminal window for the largest view.</p>



<h2>Shortcuts</h2>

<p>BitFieldDraw is designed to actually be used to play around with in the interactive shell. As such, there are a number of shortcut features to make it quick to type.</p>

<p>The first recommendation is to import the module with <code>from bitfielddraw import *</code> instead of <code>import bitfielddraw</code> so that you can omit the <code>bitfielddraw.</code> from the beginning of your function calls.</p>

<p>You can run <code>main()</code> to display all of the example functions that come with the module. (If you have other suggestions to be added, I'd be interested. Send them to me at <a href="mailto:al@inventwithpython.com?subject=BitFieldDraw EXAMPLES suggestion">al@inventwithpython.com</a>.)</p>

<p>Instead of typing out a lambda function, you can also pass each function a string without the <code>lambda x, y:</code> prefix: <code>'(x ^ y) % 5'</code>. In this string, the two variables must be lowercase <code>x</code> and <code>y</code>:</p>

<pre>
>>> from bitfielddraw import *
>>> printBitFieldStr('(x^y)%5', width=20, height=10)
██▀▄██▄▀▀▄██▄▀██▄▀██
██▄▀██▀▄▄▀██▀▄████▀▄
▄▀██▀▄████▄▀██▀▄▀▄██
██▀▄██▄▀▀▄██▄▀██████
▀▄██▄▀████▀▄██▄▀████
</pre>

<p>You can also use the function shortcut names: <code>p()</code> for <code>printBitFieldStr()</code>, <code>i</code> for <

<pre>
>>> from bitfielddraw import *
>>> p('(x^y)%5', width=20, height=10)
██▀▄██▄▀▀▄██▄▀██▄▀██
██▄▀██▀▄▄▀██▀▄████▀▄
▄▀██▀▄████▄▀██▀▄▀▄██
██▀▄██▄▀▀▄██▄▀██████
▀▄██▄▀████▀▄██▄▀████
</pre>

<p>The <code>save()</code> function will call either <code>saveBitFieldStr()</code> (if the filename argument ends with .txt) or <code>saveBitFieldImg()</code> (for any other file extension, such as .png or .jpg):</p>

<pre>
>>> from bitfielddraw import *
>>> save('bitfield.txt', '(x^y)%5')  # Saves bit field string as a text file.
>>> save('bitfield.png', '(x^y)%5')  # Saves bit field image as an image file.
</pre>

<p>Finally, the <code>left</code> and <code>bottom</code> keyword parameters can use the names <code>x</code> and <code>y</code> for short, since they are the x and y coordinates of the origin (the bottom-left corner of the bit field):</p>

<pre>
>>> from bitfielddraw import *
>>> p('(x^y)%5', w=20, h=10)
██▀▄██▄▀▀▄██▄▀██▄▀██
██▄▀██▀▄▄▀██▀▄████▀▄
▄▀██▀▄████▄▀██▀▄▀▄██
██▀▄██▄▀▀▄██▄▀██████
▀▄██▄▀████▀▄██▄▀████
>>> p('(x^y)%5', x=5, w=20, h=10)
█▄▀▀▄██▄▀██▄▀████▀▄█
█▀▄▄▀██▀▄████▀▄████▀
▄████▄▀██▀▄▀▄███████
█▄▀▀▄██▄▀████████▀▄█
▀████▀▄██▄▀████▀▄██▄
>>> p('(x^y)%5', x=5, y=2, w=20, h=10)
▀████▀▄██▄▀██▄▀▀▄███
█▄▀▀▄██▄▀██▄▀████▀▄█
█▀▄▄▀██▀▄████▀▄████▀
▄████▄▀██▀▄▀▄███████
█▄▀▀▄██▄▀████████▀▄█
</pre>


















Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
